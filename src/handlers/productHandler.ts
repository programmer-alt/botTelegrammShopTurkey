import TelegramBot from "node-telegram-bot-api";
import { getProducts } from "../database";
import { createMainKeyboard } from "../keyboards/keyboard";

export const productHandler = async (
  bot: TelegramBot,
  chatId: number,
  productName: string,
): Promise<string | null> => {
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    const loadingMessage = await bot.sendMessage(chatId, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–æ–¥—É–∫—Ç—ã...");
    
    const products = await getProducts();
    const totalProductsCount = products.length;

    const filteredProducts = productName
      ? products.filter((product) =>
          product.name.toLowerCase().includes(productName.toLowerCase()),
        )
      : products;

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ (–ø—Ä–∏–≤–æ–¥–∏–º message_id –∫ number)
    await bot.deleteMessage(chatId, Number(loadingMessage.message_id));

 
    if (!products.length) {
      await bot.sendMessage(chatId, "‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
      return null;
    }
    
    

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã
    await bot.sendMessage(
      chatId,
      `‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${filteredProducts.length}\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
      `–°–µ–π—á–∞—Å –ø–æ–∫–∞–∂–µ–º...`,
      {parse_mode: 'Markdown'},
    );


    const productResults = [];
    
    for (const product of filteredProducts) {
      if (product.image_path) {
        await bot.sendPhoto(chatId, product.image_path);
      }

      const productText = [
        `üè∑Ô∏è ${product.name}`,
        product.price && `üí∞ –¶–µ–Ω–∞: ${product.price} —Ä—É–±.`,
        product.description && `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${product.description}`,
      ]
        .filter(Boolean)
        .join("\n");

      await bot.sendMessage(chatId, productText, {
        reply_markup: createMainKeyboard(),
      });

      productResults.push(product.name);
    }

    return productResults.join(", ");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", error);
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", {
      reply_markup: createMainKeyboard(),
    });
    return null;
  }
};

export default productHandler;