// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
import TelegramBot from "node-telegram-bot-api";
import { createMainKeyboard } from "../keyboards/keyboard";
import { config } from "../config/config";
import { getProducts } from "../database";

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
export const productHandler = async (
  bot: TelegramBot,
  chatId: number,
  productName: string,
): Promise<string | null> => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const products = await getProducts();
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–∏—Å–∫–∞
    const filteredProducts = productName
      ? products.filter((product) =>
          product.name.toLowerCase().includes(productName.toLowerCase()),
        )
      : products;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã
    if (filteredProducts.length === 0) {
      await bot.sendMessage(chatId, "–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", {
        reply_markup: createMainKeyboard(),
      });
      return null;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    await bot.sendMessage(
      chatId,
      `–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${filteredProducts.length}`
    );

    // –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
    for (const product of filteredProducts) {
      // –ï—Å–ª–∏ —É –ø—Ä–æ–¥—É–∫—Ç–∞ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
      if (product.image_path) {
        await bot.sendPhoto(chatId, product.image_path);
      }
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –æ –ø—Ä–æ–¥—É–∫—Ç–µ
      let productText = `üè∑Ô∏è ${product.name}\n`;
      // –ï—Å–ª–∏ —É –ø—Ä–æ–¥—É–∫—Ç–∞ —Ü–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ —Ç–µ–∫—Å—Ç
      if (product.price) {
        productText += `üí∞ –¶–µ–Ω–∞: ${product.price} —Ä—É–±.\n`;
      }
      // –ï—Å–ª–∏ —É –ø—Ä–æ–¥—É–∫—Ç–∞ –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç
      if (product.description) {
        productText += `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${product.description}\n`;
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ –ø—Ä–æ–¥—É–∫—Ç–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
      await bot.sendMessage(chatId, productText, {
        reply_markup: createMainKeyboard(),
      });
    }
    
    return filteredProducts.map((product) => product.name).join(", ");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", error);
    await bot.sendMessage(
      chatId,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
      { reply_markup: createMainKeyboard() }
    );
    return null;
  }
};
