import TelegramBot from "node-telegram-bot-api";
import axios from "axios";
import { createMainKeyboard } from "../keyboards/keyboard";
import { config } from "../config/config";
import { Product } from "../../common/models/product";
import fs from "fs";

export const productHandler = async (
  bot: TelegramBot,
  chatId: number,
  productName: string,
): Promise<string | null> => {
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    const loadingMessage = await bot.sendMessage(
      chatId,
      "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–æ–¥—É–∫—Ç—ã..."
    );

    const response = await axios.get("http://localhost:3001/api/products");
    const products = response.data;
    const totalProductsCount = products.length;

    const filteredProducts = productName
      ? products.filter((product: Product) =>
          product.name.toLowerCase().includes(productName.toLowerCase())
        )
      : products;

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ (–ø—Ä–∏–≤–æ–¥–∏–º message_id –∫ number)
    await bot.deleteMessage(chatId, Number(loadingMessage.message_id));
    await bot.sendMessage(
      chatId,
      `üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–∑–µ: ${totalProductsCount} üõí\n\nüîπ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã: ${products
        .map((p: Product) => p.name)
        .join(", ")}`,
      { parse_mode: "Markdown" }
    );

    const productResults = [];

    for (const product of filteredProducts) {
      if (product.image_path) {
        // –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏
        if (fs.existsSync(product.image_path)) {
          // –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          await bot.sendPhoto(chatId, fs.createReadStream(product.image_path));
        } else {
          await bot.sendMessage(chatId, "–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.");
        }
      }

      const productText = [
        `üè∑Ô∏è ${product.name}`,
        product.price && `üí∞ –¶–µ–Ω–∞: ${product.price} —Ä—É–±.`,
        product.description && `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${product.description}`,
      ]
        .filter(Boolean)
        .join("\n");

      await bot.sendMessage(chatId, productText, {
        reply_markup: createMainKeyboard(),
      });

      productResults.push(product.name);
    }

    return productResults.join(", ");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", error);
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", {
      reply_markup: createMainKeyboard(),
    });
    return null;
  }
};

export default productHandler;
