import TelegramBot from "node-telegram-bot-api";
import { config } from "../config/config";
import { musicKeyboard } from "../keyboards/musicKeyboard";

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Å—Å–∏–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–∞—Ö
const tracks = [
  {
    title: "Bobina - The Unforgiven (Airplay Mix)",
    fileId: "src/assets/music/Bobina - The Unforgiven (Airplay Mix).mp3",
  },
  {
    title: "Killteq & D.Hash - On Repeat",
    fileId: "src/assets/music/Killteq & D.Hash - On Repeat.mp3",
  },
  {
    title: "Danaps, Hory - Bailando",
    fileId: "src/assets/music/Danaps, Hory - Bailando.mp3",
  },
  {
    title: "ONEIL, KANVISE, FAVIA - Around My Heart",
    fileId: "src/assets/music/ONEIL, KANVISE, FAVIA - Around My Heart.mp3",
  },
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
const performerTrackSelection = (trackTitle: string) => {
  return trackTitle === "Bobina - The Unforgiven (Airplay Mix)" ? "üï∫ –¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–∞—è –º—É–∑—ã–∫–∞" :
    trackTitle === "Killteq & D.Hash - On Repeat" ? "üéß –ö–ª—É–±–Ω–∞—è –º—É–∑—ã–∫–∞" :
    trackTitle === "Danaps, Hory - Bailando" ? "üéß –†–µ—Ç—Ä–æ —Ä–µ–º–∏–∫—Å" :
    trackTitle === "ONEIL, KANVISE, FAVIA - Around My Heart" ? "üéß 80s —Ä–µ–º–∏–∫—Å" :
    "Unknown";
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤
export const sendTrackList = (bot: TelegramBot, chatId: number) => {
  const trackList = tracks
    .map((track, index) => `${index + 1}. ${track.title}`)
    .join("\n");

  bot.sendMessage(chatId, config.messages.music + "\n" + trackList, {
    reply_markup: {
      keyboard: musicKeyboard(tracks),
      one_time_keyboard: true,
      resize_keyboard: true,
    },
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–∫–∞
export const handleTrackSelection = (bot: TelegramBot, msg: TelegramBot.Message) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  const match = text?.match(/^(\d+)\./);
  const selectedTrackIndex = match ? parseInt(match[1]) - 1 : -1;

  if (selectedTrackIndex >= 0 && selectedTrackIndex < tracks.length) {
    const selectedTrack = tracks[selectedTrackIndex];
    bot.sendMessage(chatId, "‚¨ÜÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –º—É–∑—ã–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...‚û°Ô∏è");

    bot.sendAudio(chatId, selectedTrack.fileId, {
      caption: selectedTrack.title,
      title: selectedTrack.title,
      performer: performerTrackSelection(selectedTrack.title) ?? '',
    }).then(() => {
      bot.sendMessage(chatId, `üéµ–¢–µ–ø–µ—Ä—å —Å–ª—É—à–∞–π—Ç–µ —Ç—Ä–µ–∫!üëç`);
    });
  } else {
    bot.sendMessage(chatId, "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.");
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º—É–∑—ã–∫–∏
export const registerMusicHandlers = (bot: TelegramBot) => {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /music
  bot.onText(/\/music/, async (msg: TelegramBot.Message) => {
    try {
      await sendTrackList(bot, msg.chat.id);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /music:", error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–∫–∞
  bot.on("message", async (msg: TelegramBot.Message) => {
    try {
      const text = msg.text;
      if (text && /^\d+\./.test(text)) {
        await handleTrackSelection(bot, msg);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–∫–∞:", error);
    }
  });
};